import VCS

Import('env')

objects = map(env.ObjectGenHeader, [
    'Asset.h',
    'AssetLoader.h',
    'Game.h',
    'Mesh.h',
    'Object.h',
    'Texture.h',
])

objects += map(env.Object, [
    'Asset.cpp',
    'AssetLoader.cpp',
    'AssetManager.cpp',
    'DebugManager.cpp',
    'DebugWindow.cpp',
    'Engine.cpp',
    'FrameAllocator.cpp',
    'ImGUI.cpp',
    'JSONSerialiser.cpp',
    'Main.cpp',
    'Mesh.cpp',
    'Object.cpp',
    'Serialiser.cpp',
    'Texture.cpp',
    'Version.cpp',
    'Window.cpp',
])

# Generate the version information file.
def GenerateVersionCPP(target, source, env):
    version = VCS.RevisionID()

    f = open(str(target[0]), 'w')
    f.write('const char *gVersionString = "%s";\n' % (version))
    f.close()
AlwaysBuild(env.Command('Version.cpp', [], env.Action(GenerateVersionCPP, None)))

Return('objects')
