import os

Import('manager')

dummyEnv = Environment(ENV = os.environ)
dummyEnv['CPPPATH'] = []
dummyEnv['LIBPATH'] = []
dummyEnv['LIBS'] = []

def AddExternalComponent(name, env):
    manager.AddComponent(
        name = name,
        includePath = env['CPPPATH'],
        libPath = env['LIBPATH'],
        libs = env['LIBS'])

# libclang.
llvmEnv = dummyEnv.Clone()
llvmEnv.ParseConfig('llvm-config --cflags --ldflags')
llvmEnv['LIBS'] = ['clang']
AddExternalComponent('External/libclang', llvmEnv)

# SDL.
sdlEnv = dummyEnv.Clone()
sdlEnv.ParseConfig('sdl2-config --cflags --libs')
AddExternalComponent('External/SDL', sdlEnv)

# shaderc.
manager.AddComponent(
    name = 'External/shaderc',
    includePath = Dir('../Common/shaderc/Include'),
    libPath = Dir('shaderc/Lib'),
    libs = ['shaderc_combined'])

# Vulkan SDK.
#
# Expect to find the headers in the default system include path, and we load it
# dynamically at runtime, so just add the component as empty to satisfy the
# dependency.
AddExternalComponent('External/Vulkan', dummyEnv)

# XCB.
xcbEnv = dummyEnv.Clone()
xcbEnv.ParseConfig('pkg-config --cflags --libs x11-xcb')
AddExternalComponent('External/XCB', xcbEnv)
